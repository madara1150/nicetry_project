// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:12345678@localhost:3306/nicetry"
}


model User{
  id String @id @default(uuid())
  username String @unique
  password String 
  first_name String 
  last_name String
  role Role? @default(USER)
  email String
  phone_number String?
  info String?
  coin Int @default(0)
  CreateAt DateTime @default(now())
  post   Post[]
  donation Donation[]
  comment Comment[]
  report Report[]
  image Image[]
  topup Topup[]
  withdraw Withdraw[]
  like Like[]
}

enum Role {
  USER
  ADMIN
}

model Post{
  id String @id @default(uuid())
  user_id String?
  info String?
  like Int @default(0)
  CreateAt DateTime @default(now())
  User User? @relation(fields: [user_id], references: [id] ,onDelete: Cascade)
  donation Donation[]
  comment Comment[]
  report Report[]
  image Image[]
  Like Like[]

}

model Donation{
  id String @id @default(uuid())
  user_id String?
  post_id String?
  amount Int
  status Boolean @default(false)
  CreateAt DateTime @default(now())
  User User? @relation(fields: [user_id], references: [id] ,onDelete: Cascade)
  Post Post? @relation(fields: [post_id], references: [id] ,onDelete: Cascade)
}

model Comment{
  id String @id @default(uuid())
  user_id String?
  post_id String?
  info String?
  createAt DateTime @default(now())
  User User? @relation(fields: [user_id], references: [id] ,onDelete: Cascade)
  Post Post? @relation(fields: [post_id], references: [id] ,onDelete: Cascade)
}

model Report {
  id String @id @default(uuid())
  post_id String?
  user_id String?
  reson String?
  status Boolean @default(false)
  User User? @relation(fields: [user_id], references: [id] ,onDelete: Cascade)
  Post Post? @relation(fields: [post_id], references: [id] ,onDelete: Cascade)
}

model Image{
  id String @id @default(uuid())
  post_id String?
  user_id String?
  topup_id String?
  filePath String
  uploadDate DateTime @default(now())
  User User? @relation(fields: [user_id], references: [id] ,onDelete: Cascade)
  Post Post? @relation(fields: [post_id], references: [id] ,onDelete: Cascade)
  Topup Topup? @relation(fields: [topup_id], references: [id] ,onDelete: Cascade)
}

model Topup{
  id String @id @default(uuid())
  user_id String?
  amount Int
  bank_topup String
  bank_num String
  topup_package Float
  status Boolean @default(false)
  topup_time DateTime @default(now())
  User User? @relation(fields: [user_id], references: [id] ,onDelete: Cascade)
  image Image[]
}

model Withdraw{
  id String @id @default(uuid())
  user_id String?
  amount Int
  bank_name String
  acc_num String
  status Boolean @default(false)
  createAt DateTime @default(now())
  User User? @relation(fields: [user_id], references: [id] ,onDelete: Cascade)


}

model Like{
  user_id String
  post_id String
  state Boolean @default(false)
  User User? @relation(fields: [user_id], references: [id] ,onDelete: Cascade)
  Post Post? @relation(fields: [post_id], references: [id] ,onDelete: Cascade)
  @@id([post_id, user_id])
}